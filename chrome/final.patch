diff --git a/base/allocator/allocator.gni b/base/allocator/allocator.gni
index 04d2a4c6a6dcc..57801f99b56f0 100644
--- a/base/allocator/allocator.gni
+++ b/base/allocator/allocator.gni
@@ -6,7 +6,7 @@ import("//build/config/chromecast_build.gni")
 import("//build/config/sanitizers/sanitizers.gni")
 
 # Sanitizers replace the allocator, don't use our own.
-_is_using_sanitizers = is_asan || is_hwasan || is_lsan || is_tsan || is_msan
+_is_using_sanitizers = is_asan || is_hwasan || is_lsan || is_tsan || is_msan || is_camp
 
 # - Windows: shims don't work for component builds and debug CRT is not
 # compatible, see below. On x86, there are some memory regresions.
diff --git a/build/config/BUILD.gn b/build/config/BUILD.gn
index c0a686022adf6..46c73328401e5 100644
--- a/build/config/BUILD.gn
+++ b/build/config/BUILD.gn
@@ -78,7 +78,7 @@ config("feature_flags") {
   if (use_x11) {
     defines += [ "USE_X11=1" ]
   }
-  if (is_asan || is_hwasan || is_lsan || is_tsan || is_msan) {
+  if (is_asan || is_hwasan || is_lsan || is_tsan || is_msan || is_camp) {
     defines += [ "MEMORY_TOOL_REPLACES_ALLOCATOR" ]
   }
   if (is_asan) {
diff --git a/build/config/sanitizers/BUILD.gn b/build/config/sanitizers/BUILD.gn
index f90b3318ea627..5db7a3cb1735e 100644
--- a/build/config/sanitizers/BUILD.gn
+++ b/build/config/sanitizers/BUILD.gn
@@ -155,6 +155,13 @@ config("default_sanitizer_ldflags") {
 
   if (is_posix || is_fuchsia) {
     ldflags = []
+    if (is_camp) {
+      ldflags += [
+        "-L/home/moe/violet/build/src/safe_tcmalloc/tcmalloc",
+        "-ltcmalloc_tcmalloc", 
+      ]
+    }
+
     if (is_asan) {
       ldflags += [ "-fsanitize=address" ]
     }
@@ -399,6 +406,21 @@ config("hwasan_flags") {
   }
 }
 
+config("camp_flags") {
+  if (is_camp) {
+    cflags = [
+      "-O1", "-Xclang", "-load", "-Xclang",
+      "/home/moe/violet/build/src/compiler_pass/libProtectionPass.so",
+      "-flegacy-pass-manager",
+      "-L/home/moe/violet/build/src/safe_tcmalloc/tcmalloc",
+      "-ltcmalloc_tcmalloc", 
+      "-Qunused-arguments", 
+      "-Wpointer-arith", 
+      "-Wpointer-to-int-cast",
+    ]
+  }
+}
+
 config("lsan_flags") {
   if (is_lsan) {
     cflags = [ "-fsanitize=leak" ]
@@ -536,6 +558,7 @@ all_sanitizer_configs = [
   ":lsan_flags",
   ":msan_flags",
   ":tsan_flags",
+  ":camp_flags",
   ":ubsan_flags",
   ":ubsan_no_recover",
   ":ubsan_null_flags",
diff --git a/build/config/sanitizers/sanitizers.gni b/build/config/sanitizers/sanitizers.gni
index 39d197cf600c5..d82ba9e6ff820 100644
--- a/build/config/sanitizers/sanitizers.gni
+++ b/build/config/sanitizers/sanitizers.gni
@@ -18,6 +18,9 @@ declare_args() {
   # See http://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html
   is_hwasan = false
 
+
+  is_camp = false
+  
   # Compile for Leak Sanitizer to find leaks.
   is_lsan = false
 
